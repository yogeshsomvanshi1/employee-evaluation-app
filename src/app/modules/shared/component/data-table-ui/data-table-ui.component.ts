import { HttpParams } from '@angular/common/http';
import { Component, EventEmitter, Input, OnInit, Output, SimpleChanges } from '@angular/core';
import * as moment from 'moment';
// import { TableHeaderMetaData } from 'src/app/modules/product-management/model/table-header-list.model';
import Swal from 'sweetalert2';
import { Pagination } from '../../model/pagination.model';
import { TableHeaderMetaData } from '../../model/table-header-list.model';
import { SelectRecord } from '../sweetalert/sweetalert';

@Component({
  selector: 'app-data-table-ui',
  templateUrl: './data-table-ui.component.html',
  styleUrls: ['./data-table-ui.component.scss']
})
export class DataTableUiComponent implements OnInit {

  @Input() content: Array<object> = [];
  @Input() permission: Array<boolean>;
  @Input() count: Number;
  // FIXME: RENAME: This is not not just columns this contains whole Table Metadata.
  @Input() columns: TableHeaderMetaData;
  @Input() height: string = '50vh';
  // TODO: CHECK: So page search sort and button event are all events generated by data table. Check should this be one event with right model structure.
  @Output() changePageSortSearch = new EventEmitter<object>();
  // FIXME: RENAME
  @Output() buttonEvent1 = new EventEmitter<object>();
  @Output() select = new EventEmitter<object>();
  // hasOwner used to get list of based on owner-id
  @Input() hasOwner: boolean = false;

  pagination: Pagination = { pageSize: 5, serchingParmeter: "", sortKey: "", sortType: "ASC", pageNumber: 0};
  result: number = 0;
  selectedData: any = null;
  pageList = [];
  idRadio: string
  constructor() { }

  ngOnChanges(changes: SimpleChanges): void {
    let pageListTemp = []
    let totalPAges= Number(this.count) /this.pagination.pageSize;
    for (let i = 0; i < totalPAges; i++) {
      pageListTemp.push(i);
    }
    this.pageList = pageListTemp;
    this.selectedData = null;
  }

  ngOnInit() {
  }

  getValue(rowObj: object, mappedBy: String) {
    const myArray = mappedBy.split('.');
    let value = rowObj[myArray[0]];
    if(value != null){
      for (let i = 1; i < myArray.length; i++) {
        value = value[myArray[i]];
      }
    }else{
      value = "";
    }
    return value;
  }

  getDate(rowObj: object, mappedBy: String) {
    const myArray = mappedBy.split('.');
    let value = rowObj[myArray[0]];
    for (let i = 1; i < myArray.length; i++) {
      value = value[myArray[i]];
    }
    return moment(value).format('DD/MM/YYYY');
  }

  getValueForBoolen(rowObj: object,mappedBy: String,displayValue){
    const myArray = mappedBy.split('.');
    let value = rowObj[myArray[0]];
    if(value != null){
      for (let i = 1; i < myArray.length; i++) {
        value = value[myArray[i]];
      }
    }else{
      value = false;
    }
    if(displayValue[0].key==value) {
      return displayValue[0].value;
    }else{
      return displayValue[1].value;
    }
  }

  confirmDelete() {
    let data = {
      event: 'delete',
      data: this.selectedData
    }
    this.buttonEvent1.emit(data);
    let deletemodal = document.getElementById('openModalforDelete');
    deletemodal.style.display = 'none';
  }

  changePageNo(event: any) {
    this.pagination.pageNumber = event;
    this.createUrl();
  }
  sorting(column: string) {
    if (this.pagination.sortKey == column) {
      this.pagination.sortType = this.pagination.sortType == "ASC" ? 'DESC' : 'ASC';
    } else {
      this.pagination.sortKey = column;
      this.pagination.sortType = 'ASC';
    }
    this.pagination.pageNumber = 0;
    this.createUrl();
  }

  pageChange() {
    this.pagination.pageNumber = 0;
    this.createUrl();
  }

  createUrl() {
    let params = new HttpParams();
    params = params.append('offset', this.pagination.pageNumber* this.pagination.pageSize+1);
    params = params.append('limit', this.pagination.pageSize);
    if (this.pagination.serchingParmeter != "" && this.pagination.serchingParmeter != undefined && this.pagination.serchingParmeter != null) {
      params = params.append('name', this.pagination.serchingParmeter);
    }
    if (this.pagination.sortKey != "" && this.pagination.sortKey != null && this.pagination.sortKey != undefined) {
      params = params.append('sort', this.pagination.sortKey+","+this.pagination.sortType);
    }
    if(this.hasOwner) {
      params = params.append('owner',JSON.parse(sessionStorage.getItem('userDetails'))?.userId);
    }
    this.changePageSortSearch.emit(params);
  }


  buttonEvent(event: string) {
    let data = {
      event: event,
      data: event == 'add' ? null : this.selectedData
    }

    if (event == 'edit' || event == 'delete') {
      if (this.selectedData != "" && this.selectedData != undefined && this.selectedData != null && this.selectedData != {}) {
        if (event == 'delete') {
          this.DeleteRecord();
        }
        else {
          this.buttonEvent1.emit(data);
        }
        return;
      } else {
        SelectRecord();
        return
      }
    }
    this.buttonEvent1.emit(data);
  }
  btnEventInside(value: any, btnvalue) {
    let data = {
      event: 'inSidebtn',
      data: value,
      btnEvent: btnvalue
    }
    this.buttonEvent1.emit(data);
  }
  radioButton(value: any) {
    this.selectedData = value;
    this.select.emit(value);
  }
  DeleteRecord() {
    let data = {
      event: 'delete',
      data: this.selectedData
    }
    Swal.fire({
      title: 'Are you sure?',
      text: 'You want to delete the data',
      icon: 'warning',
      showCancelButton: true,
      cancelButtonText: 'Cancel',
      confirmButtonColor: "rgb(220, 53, 69)",
      confirmButtonText: 'Yes  ',
      showClass: {
        backdrop: 'swal2-noanimation', // disable backdrop animation
        popup: '',                     // disable popup animation
        icon: ''                       // disable icon animation
      },
      hideClass: {
        popup: '',                     // disable popup fade-out animation
      },
    }).then((result) => {
      if (result.value) {

        this.buttonEvent1.emit(data);
      } else if (result.dismiss === Swal.DismissReason.cancel) {
        Swal.fire(

          {
            title: 'Cancelled',
            text: 'Your data is safe',
            confirmButtonText: 'OK',
            icon: 'success',

            showClass: {
              backdrop: 'swal2-noanimation', // disable backdrop animation
              popup: '',                     // disable popup animation
              icon: ''                       // disable icon animation
            },
            hideClass: {
              popup: '',                     // disable popup fade-out animation
            },
          }
        )
      }
    })
  }


}
